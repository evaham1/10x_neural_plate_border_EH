#!/usr/bin/env nextflow


params {
    modules {
    /*
    * Global process params
    */

        'seurat_h5ad' {
            publish_files       = false
            args                = "--assay integrated --outfile seurat --group_by scHelper_cell_type"
        }
        'merge_loom' {
            publish_files       = false
        }


    /*
    * Sub-workflow specific process params
    */

        // Seurat filtering processes
        'preprocessing' {
            publish_dir         = "seurat_filtering/1_preprocessing"
        }
        'integration' {
            publish_dir         = "seurat_filtering/2_integration"
        }
        'integration_qc' {
            publish_dir         = "seurat_filtering/3_integration_qc"
        }
        'sex_filt' {
            publish_dir         = "seurat_filtering/4_sex_filt"
        }
        'cell_cycle' {
            publish_dir         = "seurat_filtering/5_cell_cycle"
        }
        'contamination_filt' {
            publish_dir         = "seurat_filtering/6_contamination_filt"
            args                = "--filter TRUE --verbose TRUE"
        }

        // Stage split processes
        'stage_split' {
            publish_files       = false
            args                = "--split stage"
        }
        'stage_cluster' {
            publish_dir         = "stage_split"
            publish_by_meta     = ['sample_id', 'seurat', 'stage_cluster']
            args                = "--clustres 1.2"
        }
        'stage_gene_modules' {
            publish_dir         = "stage_split"
            publish_by_meta     = ['sample_id', 'antler', 'stage_gene_modules']
            args                = "--meta_col scHelper_cell_type"
        }
        'stage_state_classification' {
            publish_dir         = "stage_split"
            publish_by_meta     = ['sample_id', 'seurat', 'stage_state_classification']
        }
        'stage_seurat_intersect_loom' {
            publish_dir         = "stage_split"
            publish_by_meta     = ['sample_id', 'scvelo', 'seurat_intersect_loom']
        }

        // Stage split process with contamination
        'stage_cluster_contam' {
            publish_dir         = "stage_split_contam"
            publish_by_meta     = ['sample_id', 'seurat', 'stage_cluster']
            args                = "--clustres 1.2"
        }
        'stage_state_classification_contam' {
            publish_dir         = "stage_split_contam"
            publish_by_meta     = ['sample_id', 'seurat', 'stage_state_classification']
        }

        // Transfer full processes
        'transfer_labels' {
            publish_dir         = "transfer_labels/seurat"
        }
        'plot_dotplots' {
            publish_dir         = "transfer_labels/dotplots"
        }
        'transfer_labels_gene_modules' {
            publish_dir         = "transfer_labels/antler/gene_modules"
            args                = "--meta_col scHelper_cell_type"
        }
        'transfer_labels_seurat_intersect_loom' {
            publish_dir         = "transfer_labels/scvelo/seurat_intersect_loom"
        }

        // Prep for integration process
        'contamination_ident' {
            publish_dir         = "integration_prep/contamination_ident"
            args                = "--filter FALSE --group_by scHelper_cell_type --verbose TRUE"
        }
    }
}


process {
    // By default processes ran with schelper 0.2.4
    withName: R {
        container = 'alexthiery/10x-npb-schelper:base-0.2.4'
    }
    
    // Set process specific params
    withName: PREPROCESSING {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: INTEGRATION {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: SEX_FILT {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: CELL_CYCLE {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: CONTAMINATION_FILT {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: GENE_MODULES {
        cpus = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}
