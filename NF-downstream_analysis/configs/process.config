#!/usr/bin/env nextflow


params {
    modules {
    /*
    * Global process params
    */

        'seurat_h5ad' {
            publish_files       = false
            args                = "--assay integrated --outfile seurat --group_by scHelper_cell_type"
        }
        'merge_loom' {
            publish_files       = false
        }
        'gene_modules_subset_latent_time' {
            publish_dir         = "transfer_labels/gene_modules_subset_latent_time"
        }
        'gene_modules_npb_latent_time' {
            publish_dir         = "transfer_subset/transfer_ppr_nc_subset/gene_modules_npb_latent_time"
        }
        'coexpression_analysis_npb' {
            publish_dir         = "transfer_subset/transfer_ppr_nc_subset/coexpression_analysis"
        }
        'coexpression_nc_ppr_modules_npb' {
            publish_dir         = "transfer_subset/transfer_ppr_nc_subset/coexpression_nc_ppr_modules_npb"
        }

    

    // Exploratory analysis processes for full filtered Seurat data
        'gene_modules' {
            publish_dir         = "filtered_seurat/antler/gene_modules"
            args                = "--meta_col scHelper_cell_type"
        }
        'state_classification' {
            publish_dir         = "filtered_seurat/seurat/state_classification"
        }
        'seurat_intersect_loom' {
            publish_dir         = "filtered_seurat/scvelo/seurat_intersect_loom"
        }
        'scvelo_run' {
            publish_dir         = "filtered_seurat/scvelo/scvelo_run"
            args                = "-m dynamical -c scHelper_cell_type -s stage -b run --coloursColumn cell_colours --npcs 20 --nneighbours 20 --rootEarliest HH4 HH5 HH6 HH7 ss4 ss8 --rootCol stage --weightDiffusion 0.2 --diffKinetics True"
        }
        'cellrank_run' {
            publish_dir         = "filtered_seurat/cellrank"
            args                = "-c scHelper_cell_type -ck True -kp 0.2 -sm 4 --dataType full"
        }


    /*
    * Sub-workflow specific process params
    */

        // Seurat filtering processes
        'preprocessing' {
            publish_dir         = "seurat_filtering/1_preprocessing"
        }
        'integration' {
            publish_dir         = "seurat_filtering/2_integration"
        }
        'integration_qc' {
            publish_dir         = "seurat_filtering/3_integration_qc"
        }
        'sex_filt' {
            publish_dir         = "seurat_filtering/4_sex_filt"
        }
        'cell_cycle' {
            publish_dir         = "seurat_filtering/5_cell_cycle"
        }
        'contamination_filt' {
            publish_dir         = "seurat_filtering/6_contamination_filt"
            args                = "--filter TRUE --verbose TRUE"
        }

        // Stage split processes
        'stage_split' {
            publish_files       = false
            args                = "--split stage"
        }
        'stage_cluster' {
            publish_dir         = "stage_split"
            publish_by_meta     = ['sample_id', 'seurat', 'stage_cluster']
            args                = "--clustres 1.2"
        }
        'stage_gene_modules' {
            publish_dir         = "stage_split"
            publish_by_meta     = ['sample_id', 'antler', 'stage_gene_modules']
            args                = "--meta_col scHelper_cell_type"
        }
        'stage_state_classification' {
            publish_dir         = "stage_split"
            publish_by_meta     = ['sample_id', 'seurat', 'stage_state_classification']
        }
        'stage_seurat_intersect_loom' {
            publish_dir         = "stage_split"
            publish_by_meta     = ['sample_id', 'scvelo', 'seurat_intersect_loom']
        }
        'stage_scvelo_run' {
            publish_dir         = "stage_split"
            args                = "-m dynamical -c scHelper_cell_type -s stage -b run --coloursColumn cell_colours --npcs 20 --nneighbours 20 --weightDiffusion 0.2 --diffKinetics True"
            publish_by_meta     = ['sample_id', 'scvelo', 'scvelo_run']
        }


        // Stage split process with contamination
        'stage_cluster_contam' {
            publish_dir         = "stage_split_contam"
            publish_by_meta     = ['sample_id', 'seurat', 'stage_cluster']
            args                = "--clustres 1.2"
        }
        'stage_state_classification_contam' {
            publish_dir         = "stage_split_contam"
            publish_by_meta     = ['sample_id', 'seurat', 'stage_state_classification']
        }

        // Transfer full processes
        'transfer_labels' {
            publish_dir         = "transfer_labels/seurat"
            args                = "--verbose TRUE"
        }
        'plot_dotplots' {
            publish_dir         = "transfer_labels/dotplots"
        }
        'transfer_labels_gene_modules' {
            publish_dir         = "transfer_labels/antler/gene_modules"
            args                = "--meta_col scHelper_cell_type"
        }
        'transfer_labels_seurat_intersect_loom' {
            publish_dir         = "transfer_labels/scvelo/seurat_intersect_loom"
        }
        'transfer_labels_scvelo_run' {
            publish_dir         = "transfer_labels/scvelo/scvelo_run"
            args                = "-m dynamical -c scHelper_cell_type -s stage -b run --coloursColumn cell_colours --npcs 20 --nneighbours 20 --rootEarliest HH4 HH5 HH6 HH7 ss4 ss8 --rootCol stage  --weightDiffusion 0.2 --diffKinetics True"
        }
        'transfer_labels_cellrank_run' {
            publish_dir         = "transfer_labels/cellrank"
            args                = "-c scHelper_cell_type -ck True -kp 0.2 -sm 4 --dataType labelTransfer"
        }

        // Transfer subset processes
        'transfer_ppr_nc_subset' {
            publish_dir         = "transfer_clusters_subset/npb_subset/seurat/clusters_subset"
            args                = "--groups1 PPR,aPPR,pPPR,NPB,pNPB,aNPB,NC,dNC --meta_col1 scHelper_cell_type --groups2 HH5,HH6,HH7,ss4,ss8 --meta_col2 stage --verbose TRUE --output transfer_ppr_nc_subset"
        }
        'transfer_subset_cluster' {
            publish_dir         = "transfer_subset"
            args                = "--verbose TRUE --meta_col scHelper_cell_type"
            publish_by_meta     = ['sample_id', 'seurat', 'transfer_cluster']
        }
        'transfer_subset_gene_modules' {
            publish_dir         = "transfer_subset"
            publish_by_meta     = ['sample_id', 'antler', 'transfer_gene_modules']
            args                = "--meta_col scHelper_cell_type"
        }
        'transfer_subset_seurat_intersect_loom' {
            publish_dir         = "transfer_subset"
            publish_by_meta     = ['sample_id', 'scvelo', 'seurat_intersect_loom']
        }
        'transfer_subset_scvelo_run' {
            publish_dir         = "transfer_subset"
            args                = "-m dynamical -c scHelper_cell_type -s stage -b run --coloursColumn cell_colours --npcs 20 --nneighbours 20 --weightDiffusion 0.2 --diffKinetics True --rootEarliest HH4 HH5 HH6 HH7 ss4 ss8 --rootCol stage --endLatest HH4 HH5 HH6 HH7 ss4 ss8 --endCol stage"
            publish_by_meta     = ['sample_id', 'scvelo', 'scvelo_run']
        }
        'transfer_ppr_nc_subset_cellrank_run' {
            publish_dir         = "transfer_subset"
            args                = "-c scHelper_cell_type -ck True -kp 0.2 -sm 4 --dataType ppr_nc"
            publish_by_meta     = ['sample_id', 'cellrank']
        }
        
        // Prep for integration process
        'contamination_ident' {
            publish_dir         = "integration_prep/contamination_ident"
            args                = "--filter FALSE --group_by scHelper_cell_type --verbose TRUE"
        }
        'transfer_labels_for_integration' {
            publish_dir         = "integration_prep/transfer_labels"
            args                = "--group_by_source scHelper_cell_type --group_by_destination scHelper_cell_type --destination_data contamination_identified.RDS"
        }
        'subset_remove_HH4' {
            publish_dir         = "integration_prep/subset_remove_HH4"
            args                = "--groups1 HH5,HH6,HH7,ss4,ss8 --meta_col1 stage --verbose TRUE --output minus_hh4_subset"
        }
        'HH4_subset_cluster' {
            publish_dir         = "integration_prep/minus_HH4_clustered"
            args                = "--clustres 1.2"
        }
        'transfer_labels_integration' {
            publish_dir         = "integration_prep/ready_for_integration"
            args                = "--group_by_source scHelper_cell_type --group_by_destination scHelper_cell_type_new --destination_data minus_clustered_data.RDS"
        }
    }
}


process {
    // By default processes ran with schelper 0.2.4
    withName: R {
        container = 'alexthiery/10x-npb-schelper:base-0.2.4'
    }
    
    // Set process specific params
    withName: PREPROCESSING {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: INTEGRATION {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: SEX_FILT {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: CELL_CYCLE {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: CONTAMINATION_FILT {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
    withName: GENE_MODULES {
        cpus = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}
